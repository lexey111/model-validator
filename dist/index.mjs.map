{"version":3,"sources":["../src/engine/helpers.ts","../src/engine/utils.ts","../src/engine/processing.ts","../src/engine/validation-engine.ts","../src/validators/validator-email.ts","../src/validators/validator-array-length.ts","../src/validators/validator-string-length.ts","../src/validators/validator-string-pattern.ts","../src/validators/validator-string-contains.ts","../src/validators/validator-string-required.ts","../src/validators/validator-number-range.ts"],"sourcesContent":["import {TValidationResult, TValidationViolationLevel, TViolation} from \"./validation-types\";\n\nfunction countSmthLike(key: string | RegExp, target?: TViolation, exact = false): number {\n\tif (!target || !key) {\n\t\treturn 0;\n\t}\n\n\tif (exact && typeof key === 'string') {\n\t\treturn target[key]?.length || 0;\n\t}\n\n\tlet allKeys;\n\n\tif (typeof key === 'string') {\n\t\tallKeys = Object.keys(target).filter(path => path.indexOf(key) !== -1);\n\t} else {\n\t\tallKeys = Object.keys(target).filter(path => key.test(path));\n\t}\n\treturn allKeys.reduce((prev, current) => prev + target[current].length, 0);\n}\n\nexport function countErrorsLike(key: string | RegExp, result?: TValidationResult, exact = false): number {\n\treturn countSmthLike(key, result?.errors, exact);\n}\n\nexport function countWarningsLike(key: string | RegExp, result?: TValidationResult, exact = false): number {\n\treturn countSmthLike(key, result?.warnings, exact);\n}\n\nexport function countNoticesLike(key: string | RegExp, result?: TValidationResult, exact = false): number {\n\treturn countSmthLike(key, result?.notices, exact);\n}\n\nexport function hasErrors(result?: TValidationResult): boolean {\n\tif (!result) {\n\t\treturn false;\n\t}\n\treturn result.stats.total_errors > 0;\n}\n\nexport function hasWarnings(result?: TValidationResult): boolean {\n\tif (!result) {\n\t\treturn false;\n\t}\n\treturn result.stats.total_warnings > 0;\n}\n\nexport function hasNotices(result?: TValidationResult): boolean {\n\tif (!result) {\n\t\treturn false;\n\t}\n\treturn result.stats.total_notices > 0;\n}\n\nfunction hasSmth(key: string | RegExp, target?: TViolation): boolean {\n\tif (!target || !key) {\n\t\treturn false;\n\t}\n\n\tif (typeof key === 'string') {\n\t\treturn !!target[key];\n\t}\n\n\treturn Object.keys(target).some(str => key.test(str));\n}\n\nexport function hasError(key: string | RegExp, result?: TValidationResult): boolean {\n\treturn hasSmth(key, result?.errors);\n}\n\nexport function hasWarning(key: string | RegExp, result?: TValidationResult): boolean {\n\treturn hasSmth(key, result?.warnings);\n}\n\nexport function hasNotice(key: string | RegExp, result?: TValidationResult): boolean {\n\treturn hasSmth(key, result?.notices);\n}\n\nexport function getValidationClass(result?: TValidationResult, field?: string, exact = true): TValidationViolationLevel {\n\tif (!result) {\n\t\treturn \"unknown\";\n\t}\n\n\tif (!field) {\n\t\treturn result.level;\n\t}\n\n\tif (countErrorsLike(field, result, exact) > 0) {\n\t\treturn 'error';\n\t}\n\n\tif (countWarningsLike(field, result, exact) > 0) {\n\t\treturn 'warning';\n\t}\n\n\tif (countNoticesLike(field, result, exact) > 0) {\n\t\treturn 'notice';\n\t}\n\n\treturn 'none';\n}\n","import type {TValidationResult, TValidatorMessage} from \"./validation-types\";\n\nexport function isObjectEmptyOrInvalid(object: Record<string, any>): boolean {\n\tif (null === object || typeof object !== 'object') {\n\t\treturn false;\n\t}\n\treturn Object.keys(object).length === 0;\n}\n\nexport function getEmptyResult(): TValidationResult {\n\treturn {\n\t\tstate: 'unknown',\n\t\tlevel: 'unknown',\n\t\tstats: {\n\t\t\tstarted_at: new Date(),\n\t\t\tfinished_at: new Date(),\n\t\t\ttime: 0,\n\t\t\tprocessed_rules: 0,\n\t\t\tprocessed_validators: 0,\n\t\t\ttotal_errors: 0,\n\t\t\ttotal_warnings: 0,\n\t\t\ttotal_notices: 0,\n\t\t\ttotal_skipped: 0\n\t\t},\n\t\terrors: {},\n\t\twarnings: {},\n\t\tnotices: {},\n\t\tskipped: []\n\t};\n}\n\nexport function getInvalidValidationResult(reason?: string): TValidationResult {\n\tconst result = getEmptyResult();\n\tresult.state = 'internal error';\n\tresult.error = reason || 'Invalid entry parameters';\n\n\treturn result;\n}\n\ntype TGetMessage = {\n\tvalidatorMessage: TValidatorMessage\n\truleMessage: TValidatorMessage\n\tpath: string\n\tdata: any\n\tvalue?: any\n}\n\nexport function getMessage({validatorMessage, ruleMessage, path, data, value}: TGetMessage): string {\n\tif (validatorMessage) {\n\t\tif (typeof validatorMessage === 'string') {\n\t\t\treturn validatorMessage;\n\t\t}\n\t\tconst message = validatorMessage(data, value);\n\n\t\treturn typeof message === 'string' ? message || 'Empty message (validator), \"' + path + '\"' : 'Empty message (validator), \"' + path + '\"';\n\t}\n\tif (ruleMessage) {\n\t\tif (typeof ruleMessage === 'string') {\n\t\t\treturn ruleMessage;\n\t\t}\n\t\tconst message = ruleMessage(data, value);\n\n\t\treturn typeof message === 'string' ? message || 'Empty message (rule), \"' + path + '\"' : 'Empty message (rule), \"' + path + '\"';\n\t}\n\n\treturn 'Empty message, \"' + path + '\"';\n}\n","type TTraverseObject = {\n\tpath: string\n\tobj: unknown\n\tprocessingFn: (value: any, path: string) => void\n\tskippingFn: (path: string, invalidChunk: string) => void\n}\n\nexport function traverseObject({path, obj, processingFn, skippingFn}: TTraverseObject): void {\n\tif (!path || !obj) {\n\t\treturn;\n\t}\n\n\tconst pathArray = (path || '').split('.');\n\n\trecursiveProcess({pathArray, targetPath: path, obj, processingFn, skippingFn});\n}\n\ntype TRecursiveProcess = {\n\tpathArray: Array<string>\n\ttargetPath: string\n\tcurrentIndex?: number\n\tobj: unknown\n\tprocessingFn: (value: any, path: string) => void\n\tskippingFn: (path: string, invalidChunk: string) => void\n}\n\nfunction recursiveProcess({pathArray, targetPath, obj, processingFn, skippingFn, currentIndex = 0}: TRecursiveProcess) {\n\tlet currentPath = pathArray[currentIndex];\n\tcurrentIndex++;\n\n\tlet iteratorIndex = -1;\n\tlet isArray = false;\n\tlet isArrayItself = false;\n\n\tif (currentPath?.endsWith('[]')) {\n\t\tcurrentPath = currentPath.substring(0, currentPath.length - 2);\n\t\tisArray = true;\n\t\tisArrayItself = true;\n\t}\n\n\tif (currentPath?.endsWith('[*]')) {\n\t\tcurrentPath = currentPath.substring(0, currentPath.length - 3);\n\t\tisArray = true;\n\t}\n\n\tif (currentPath?.endsWith(']')) {\n\t\tconst parts = /(\\w+)\\[([^}]+)]/g.exec(currentPath); // ['addresses[0]', 'adresses', '0'...]\n\n\t\tif (parts && parts.length > 1) {\n\t\t\tcurrentPath = parts[1];\n\t\t\titeratorIndex = Number(parts[2]);\n\n\t\t\tif (isNaN(iteratorIndex)) {\n\t\t\t\titeratorIndex = -1;\n\t\t\t}\n\t\t}\n\n\t\tisArray = true;\n\t}\n\n\tif (!currentPath\n\t\t|| !obj.hasOwnProperty(currentPath)\n\t\t|| (isArray && !Array.isArray(obj[currentPath]))\n\t\t|| (isArray && iteratorIndex !== -1 && iteratorIndex >= obj[currentPath].length)\n\t) {\n\n\t\tskippingFn(targetPath, currentPath);\n\t\treturn;\n\t}\n\n\tlet current = obj[currentPath];\n\n\tif (isArray && iteratorIndex === -1) {\n\t\tif (isArrayItself) {\n\t\t\t// full iteration, array itself: addresses[]\n\t\t\tprocessingFn(current, targetPath);\n\t\t\treturn;\n\t\t}\n\n\t\t// full iteration, 'addresses[]' => 'addresses[0]', 'addresses[1]'...\n\t\tcurrent.forEach((element: any, iteratorIdx: number) => {\n\t\t\tconst iterationArray = pathArray.map((path, idx) => {\n\t\t\t\treturn idx === currentIndex - 1 ? `${currentPath}[${iteratorIdx}]` : path;\n\t\t\t});\n\n\t\t\tconst iterationPath = iterationArray.join('.');\n\t\t\tif (currentIndex === pathArray.length) {\n\t\t\t\tprocessingFn(element, iterationPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trecursiveProcess({\n\t\t\t\tpathArray: iterationArray,\n\t\t\t\ttargetPath: iterationPath,\n\t\t\t\tobj: element,\n\t\t\t\tprocessingFn,\n\t\t\t\tskippingFn,\n\t\t\t\tcurrentIndex\n\t\t\t});\n\t\t});\n\n\t\treturn;\n\t}\n\n\tif (isArray && iteratorIndex !== -1) {\n\t\t// pre-set index, 'addresses[1]'\n\t\tcurrent = current[iteratorIndex];\n\t}\n\n\tif (currentIndex < pathArray.length) {\n\t\trecursiveProcess({pathArray, targetPath, obj: current, processingFn, skippingFn, currentIndex});\n\t} else {\n\t\tprocessingFn(current, targetPath);\n\t}\n}\n","import {getEmptyResult, getInvalidValidationResult, getMessage, isObjectEmptyOrInvalid} from \"./utils\";\nimport type {IValidationEngine, TValidationModel, TValidationResult, TValidationRule} from \"./validation-types\";\nimport {traverseObject} from \"./processing\";\n\ntype TProcessRule = {\n\trule: TValidationRule\n\tvalidationPath: string\n\tvalue: any\n\tdata: any\n\tresult: TValidationResult\n};\n\nfunction processRule({rule, validationPath, value, data, result}: TProcessRule) {\n\tif (typeof rule.active !== 'undefined') {\n\t\tif (rule.active === false) {\n\t\t\tskipRule('[inactive]', validationPath, result);\n\n\t\t\treturn; // skip as inactive, static\n\t\t}\n\n\t\tif (rule.active !== true) {\n\t\t\tif (!rule.active(data, value)) {\n\t\t\t\tskipRule('[inactive]', validationPath, result);\n\n\t\t\t\treturn; // skip as inactive, dynamic\n\t\t\t}\n\t\t}\n\t}\n\n\trule.validators.forEach(validator => {\n\t\tif (!validator.validator || typeof validator.validator !== 'function') {\n\t\t\tskipRule('[invalid validator]', validationPath, result);\n\t\t\treturn;\n\t\t}\n\t\tresult.stats.processed_validators++;\n\n\t\tconst validation = validator.validator(value, validator.params, data);\n\n\t\tif (typeof validation === 'undefined') {\n\t\t\tresult.stats.total_skipped++;\n\t\t\treturn;\n\t\t}\n\n\t\tif (validation === true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst violationLevel = rule.level || validator.level || 'error';\n\n\t\tif (!['error', 'warning', 'notice'].includes(violationLevel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = getMessage({\n\t\t\tvalidatorMessage: validator.message,\n\t\t\truleMessage: rule.message,\n\t\t\tpath: validationPath,\n\t\t\tdata,\n\t\t\tvalue\n\t\t});\n\n\t\tconst resultKey = violationLevel + 's'; // errorS, warningS, noticeS\n\n\t\tresult.stats['total_' + violationLevel + 's'] += 1;\n\n\t\tif (!result[resultKey][validationPath]) {\n\t\t\tresult[resultKey][validationPath] = [message];\n\t\t} else {\n\t\t\tresult[resultKey][validationPath].push(message);\n\t\t}\n\t});\n}\n\nfunction skipRule(pathChunk: string, path: string, result: TValidationResult) {\n\tresult.stats.total_skipped++;\n\tresult.skipped.push(path + ', ' + pathChunk);\n}\n\nfunction processValidation(data: any, model: TValidationModel, result: TValidationResult) {\n\tconst postvalidators = [];\n\n\tObject.keys(model).forEach(validationPath => {\n\t\tconst rule = model[validationPath];\n\t\tif (rule.postvalidator) {\n\t\t\tpostvalidators.push(validationPath);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rule || !rule.validators || rule.validators.length === 0) {\n\t\t\tskipRule('[overall]', validationPath, result);\n\t\t\treturn; // invalid rule, skip\n\t\t}\n\t\tresult.stats.processed_rules++;\n\n\t\ttraverseObject({\n\t\t\tpath: validationPath,\n\t\t\tobj: data,\n\n\t\t\tprocessingFn: (value, path) => {\n\t\t\t\tprocessRule({\n\t\t\t\t\trule,\n\t\t\t\t\tvalidationPath: path,\n\t\t\t\t\tvalue,\n\t\t\t\t\tdata,\n\t\t\t\t\tresult\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tskippingFn: (pathChunk: string, path) => {\n\t\t\t\tskipRule(pathChunk, path, result);\n\t\t\t}\n\t\t});\n\t});\n\n\tpostprocessResult(result);\n\n\t// post validation\n\tif (postvalidators.length > 0) {\n\t\tpostvalidators.forEach(validationPath => {\n\t\t\tconst rule = model[validationPath];\n\n\t\t\tresult.stats.processed_rules++;\n\n\t\t\tconst validation = rule.postvalidator(data, result);\n\n\t\t\tif (typeof validation === 'undefined') {\n\t\t\t\tresult.stats.total_skipped++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (validation === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst violationLevel = rule.level || 'error';\n\n\t\t\tif (!['error', 'warning', 'notice'].includes(violationLevel)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = getMessage({\n\t\t\t\tvalidatorMessage: undefined,\n\t\t\t\truleMessage: rule.message,\n\t\t\t\tpath: validationPath,\n\t\t\t\tdata\n\t\t\t});\n\n\t\t\tconst resultKey = violationLevel + 's'; // errorS, warningS, noticeS\n\n\t\t\tif (!result[resultKey][validationPath]) {\n\t\t\t\tresult[resultKey][validationPath] = [message];\n\t\t\t} else {\n\t\t\t\tresult[resultKey][validationPath].push(message);\n\t\t\t}\n\n\t\t\tresult.stats['total_' + violationLevel + 's'] += 1;\n\t\t});\n\t\tpostprocessResult(result);\n\t}\n}\n\nfunction postprocessResult(result: TValidationResult) {\n\n\tif (result.stats.total_errors > 0) {\n\t\tresult.level = 'error';\n\t} else if (result.stats.total_warnings > 0) {\n\t\tresult.level = 'warning';\n\t} else if (result.stats.total_notices > 0) {\n\t\tresult.level = 'notice';\n\t}\n}\n\nexport const ValidationEngine: IValidationEngine = {\n\tvalidate: (data: Record<string, any>, model: TValidationModel) => {\n\t\tif (!data) {\n\t\t\treturn getInvalidValidationResult('No data');\n\t\t}\n\n\t\tif (!model) {\n\t\t\treturn getInvalidValidationResult('No Validation Model');\n\t\t}\n\n\t\tif (isObjectEmptyOrInvalid(data)) {\n\t\t\treturn getInvalidValidationResult('Empty/invalid data');\n\t\t}\n\n\t\tif (isObjectEmptyOrInvalid(model)) {\n\t\t\treturn getInvalidValidationResult('Empty/invalid Validation Model');\n\t\t}\n\n\t\tconst start = performance.now();\n\t\tconst result = getEmptyResult();\n\n\t\tresult.stats.started_at = new Date();\n\t\tresult.stats.finished_at = null;\n\t\tresult.level = 'none';\n\n\t\tprocessValidation(data, model, result);\n\n\t\tconst end = performance.now();\n\n\t\tresult.stats.finished_at = new Date();\n\t\tresult.stats.time = end - start;\n\n\t\tresult.state = 'completed';\n\n\t\treturn result;\n\t}\n};\n","import {type TValidatorFn} from '../engine/validation-types';\n\n// https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php\nconst pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n\nexport const ValidatorEmail: TValidatorFn = (email: string, params: {\n\tskipIfEmpty?: boolean,\n}) => {\n\tif (typeof email === 'undefined' || !email) {\n\t\tif (params?.skipIfEmpty === true) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn false;\n\t}\n\n\tif (typeof email !== 'string') {\n\t\treturn undefined;\n\t}\n\n\tpattern.lastIndex = 0;\n\treturn pattern.test(email);\n}\n","import type {TValidatorFn} from '../engine/validation-types';\n\nexport const ValidatorArrayLength: TValidatorFn = (data: Array<any>, params: {\n\tmin?: number,\n\tmax?: number,\n\tskipIfEmpty?: boolean\n}) => {\n\n\tif (!Array.isArray(data) || (typeof params?.min !== 'undefined' && typeof params?.min !== 'number') || (typeof params?.max !== 'undefined' && typeof params?.max !== 'number')) {\n\t\treturn undefined;\n\t}\n\n\tconst checkArrLength = data.length;\n\n\treturn (checkArrLength === 0 && params?.skipIfEmpty === true)\n\t\t? undefined\n\t\t: (typeof params?.min !== 'number' && typeof params?.max !== 'number')\n\t\t\t? false\n\t\t\t: checkArrLength >= (params?.min || 0) && checkArrLength <= (params?.max ?? Infinity);\n}\n","import {type TValidatorFn} from '../engine/validation-types';\n\nexport const ValidatorStringLength: TValidatorFn = (str: string, params: {\n\tmin?: number,\n\tmax?: number,\n\tskipIfEmpty?: boolean,\n\ttrim?: boolean\n}) => {\n\n\tif (typeof str !== 'string' || (typeof params?.min !== 'undefined' && typeof params?.min !== 'number') || (typeof params?.max !== 'undefined' && typeof params?.max !== 'number')) {\n\t\treturn undefined;\n\t}\n\n\tconst checkStr = (params?.trim === true ? str.trim() : str) || '';\n\tconst checkStrLength = checkStr.length;\n\n\treturn (!checkStr && params?.skipIfEmpty === true)\n\t\t? undefined\n\t\t: (typeof params?.min !== 'number' && typeof params?.max !== 'number')\n\t\t\t? false\n\t\t\t: checkStrLength >= (params?.min || 0) && checkStrLength <= (params?.max ?? Infinity);\n}\n","import {type TValidatorFn} from '../engine/validation-types';\n\nexport const ValidatorStringPattern: TValidatorFn = (str: string, params: {\n\tpattern: RegExp,\n\tskipIfEmpty?: boolean,\n}) => {\n\tif (typeof str !== 'string' || params?.pattern?.constructor !== RegExp) {\n\t\treturn undefined;\n\t}\n\n\tif (!str && params?.skipIfEmpty === true) {\n\t\treturn undefined;\n\t}\n\n\tparams.pattern.lastIndex = 0;\n\treturn params.pattern.test(str);\n}\n","import {type TValidatorFn} from '../engine/validation-types';\n\nexport const ValidatorStringContains: TValidatorFn = (str: string, params: {\n\tsearchString: string,\n\tskipIfEmpty?: boolean,\n\tcaseSensitive?: boolean\n}) => {\n\tif (typeof str !== 'string' || typeof params?.searchString !== 'string') {\n\t\treturn undefined;\n\t}\n\n\tif (!str && params?.skipIfEmpty === true) {\n\t\treturn undefined;\n\t}\n\n\tconst sourceString = params.caseSensitive === true ? str : str.toLocaleUpperCase();\n\tconst searchString = params.caseSensitive === true ? params.searchString : params.searchString.toLocaleUpperCase();\n\n\treturn !params.searchString\n\t\t? false\n\t\t: sourceString.includes(searchString);\n}\n","import type { TValidatorFn } from '../engine/validation-types';\n\nexport const ValidatorStringRequired: TValidatorFn = (str: string, params?: {allowWhitespaces?: boolean}) => {\n    if (!str) {\n        // '', null, undefined, etc.\n        return false;\n    }\n\n    if (typeof str !== 'string') {\n        return false;\n    }\n\n    if (params?.allowWhitespaces === true) {\n        return true;\n    }\n\n    return str.replaceAll(/\\s/g, '') !== '';\n}\n","import {type TValidatorFn} from '../engine/validation-types';\n\nexport const ValidatorNumberRange: TValidatorFn = (num: number, params: {\n\tmin?: number,\n\tmax?: number,\n\tskipIfEmpty?: boolean\n}) => {\n\tif (typeof num === 'undefined') {\n\t\treturn params?.skipIfEmpty === true ? undefined : false;\n\t}\n\n\tif ((typeof params?.min !== 'undefined' && typeof params?.min !== 'number') || (typeof params?.max !== 'undefined' && typeof params?.max !== 'number')) {\n\t\treturn undefined;\n\t}\n\n\tconst hasMin = typeof params?.min === 'number';\n\tconst hasMax = typeof params?.max === 'number';\n\n\tif (!hasMin && !hasMax) {\n\t\treturn undefined;\n\t}\n\n\treturn hasMax && hasMin\n\t\t? num >= params.min && num <= params.max\n\t\t: hasMin\n\t\t\t? num >= params.min\n\t\t\t: num <= params.max;\n}\n"],"mappings":"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","names":["countSmthLike","key","target","exact","allKeys","path","prev","current","countErrorsLike","result","countWarningsLike","countNoticesLike","hasErrors","hasWarnings","hasNotices","hasSmth","str","hasError","hasWarning","hasNotice","getValidationClass","field","isObjectEmptyOrInvalid","object","getEmptyResult","getInvalidValidationResult","reason","result","getMessage","validatorMessage","ruleMessage","path","data","value","message","traverseObject","path","obj","processingFn","skippingFn","pathArray","recursiveProcess","targetPath","currentIndex","currentPath","iteratorIndex","isArray","isArrayItself","parts","current","element","iteratorIdx","iterationArray","idx","iterationPath","processRule","rule","validationPath","value","data","result","skipRule","validator","validation","violationLevel","message","getMessage","resultKey","pathChunk","path","processValidation","model","postvalidators","traverseObject","postprocessResult","ValidationEngine","getInvalidValidationResult","isObjectEmptyOrInvalid","start","getEmptyResult","end","pattern","ValidatorEmail","email","params","ValidatorArrayLength","data","params","checkArrLength","ValidatorStringLength","str","params","checkStr","checkStrLength","ValidatorStringPattern","str","params","ValidatorStringContains","str","params","sourceString","searchString","ValidatorStringRequired","str","params","ValidatorNumberRange","num","params","hasMin","hasMax"]}